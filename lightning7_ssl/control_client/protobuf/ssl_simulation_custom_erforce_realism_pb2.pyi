"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class RealismConfigErForce(google.protobuf.message.Message):
    """Realism configuration for ER-Force simulator
    this message is stored in human readable form for saved ui settings
    therefore do NOT modify field names without changing them in the config files
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STDDEV_BALL_P_FIELD_NUMBER: builtins.int
    STDDEV_ROBOT_P_FIELD_NUMBER: builtins.int
    STDDEV_ROBOT_PHI_FIELD_NUMBER: builtins.int
    STDDEV_BALL_AREA_FIELD_NUMBER: builtins.int
    ENABLE_INVISIBLE_BALL_FIELD_NUMBER: builtins.int
    BALL_VISIBILITY_THRESHOLD_FIELD_NUMBER: builtins.int
    CAMERA_OVERLAP_FIELD_NUMBER: builtins.int
    DRIBBLER_BALL_DETECTIONS_FIELD_NUMBER: builtins.int
    CAMERA_POSITION_ERROR_FIELD_NUMBER: builtins.int
    ROBOT_COMMAND_LOSS_FIELD_NUMBER: builtins.int
    ROBOT_RESPONSE_LOSS_FIELD_NUMBER: builtins.int
    MISSING_BALL_DETECTIONS_FIELD_NUMBER: builtins.int
    VISION_DELAY_FIELD_NUMBER: builtins.int
    VISION_PROCESSING_TIME_FIELD_NUMBER: builtins.int
    SIMULATE_DRIBBLING_FIELD_NUMBER: builtins.int
    OBJECT_POSITION_OFFSET_FIELD_NUMBER: builtins.int
    MISSING_ROBOT_DETECTIONS_FIELD_NUMBER: builtins.int
    stddev_ball_p: builtins.float
    """Standard deviation of the gaussian noise applied to the ball position [m]"""
    stddev_robot_p: builtins.float
    """Standard deviation of the gaussian noise applied to the robot position [m]"""
    stddev_robot_phi: builtins.float
    """Standard deviation of the gaussian noise applied to the robot angle [rad]"""
    stddev_ball_area: builtins.float
    """Standard deviation of the gaussian noise applied to reported ball area [pixel]"""
    enable_invisible_ball: builtins.bool
    """Whether or not to simulate the ball being invisible when the view from the camera
    to it is blocked by a robot.
    It also simulates the slight perceived motion of the ball when it is partially
    overshadowed by a robot as the visible center of the ball shifts
    """
    ball_visibility_threshold: builtins.float
    """The occlusion threshold at which the ball will no longer be visible [0-1]
    A value of 0 would make the ball always visible
    """
    camera_overlap: builtins.float
    """The overlap of the visible range of the different cameras [m]
    For example: if there are two cameras and the overlap value is 0.5m
    then the ball is visible in both cameras between -0.5 and 0.5 meters from the centerline
    """
    dribbler_ball_detections: builtins.float
    """With this probability, additional erroneous ball detections are added
    at the edge of a robots dribbler (to emulate the red break beam lights
    sometimes being visible from the camera). [detections/s/robot]
    """
    camera_position_error: builtins.float
    """How much the reported camera positions should deviate from the actual
    camera positions used for ball projection etc. [m]
    """
    robot_command_loss: builtins.float
    """The percentage of robot control commands that are "lost in transit" [0-1]"""
    robot_response_loss: builtins.float
    """The percentage of robot reply messages that are "lost in transit" [0-1]"""
    missing_ball_detections: builtins.float
    """The percentage of times the ball is erroneously not "seen" by a camera [0-1]"""
    vision_delay: builtins.int
    """Sending out the vision data is delayed by this time after capturing the positions [ns]"""
    vision_processing_time: builtins.int
    """The difference between the reported t_capture and t_sent of the vision frame [ns]"""
    simulate_dribbling: builtins.bool
    """If false, 'glue' the ball during dribbling"""
    object_position_offset: builtins.float
    """Simulates an offset of all reported object positions (robots, ball) at this magnitude [m]"""
    missing_robot_detections: builtins.float
    """The percentage of times a robot is erroneously not "seen" by a camera [0-1]"""
    def __init__(
        self,
        *,
        stddev_ball_p: builtins.float | None = ...,
        stddev_robot_p: builtins.float | None = ...,
        stddev_robot_phi: builtins.float | None = ...,
        stddev_ball_area: builtins.float | None = ...,
        enable_invisible_ball: builtins.bool | None = ...,
        ball_visibility_threshold: builtins.float | None = ...,
        camera_overlap: builtins.float | None = ...,
        dribbler_ball_detections: builtins.float | None = ...,
        camera_position_error: builtins.float | None = ...,
        robot_command_loss: builtins.float | None = ...,
        robot_response_loss: builtins.float | None = ...,
        missing_ball_detections: builtins.float | None = ...,
        vision_delay: builtins.int | None = ...,
        vision_processing_time: builtins.int | None = ...,
        simulate_dribbling: builtins.bool | None = ...,
        object_position_offset: builtins.float | None = ...,
        missing_robot_detections: builtins.float | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "ball_visibility_threshold",
            b"ball_visibility_threshold",
            "camera_overlap",
            b"camera_overlap",
            "camera_position_error",
            b"camera_position_error",
            "dribbler_ball_detections",
            b"dribbler_ball_detections",
            "enable_invisible_ball",
            b"enable_invisible_ball",
            "missing_ball_detections",
            b"missing_ball_detections",
            "missing_robot_detections",
            b"missing_robot_detections",
            "object_position_offset",
            b"object_position_offset",
            "robot_command_loss",
            b"robot_command_loss",
            "robot_response_loss",
            b"robot_response_loss",
            "simulate_dribbling",
            b"simulate_dribbling",
            "stddev_ball_area",
            b"stddev_ball_area",
            "stddev_ball_p",
            b"stddev_ball_p",
            "stddev_robot_p",
            b"stddev_robot_p",
            "stddev_robot_phi",
            b"stddev_robot_phi",
            "vision_delay",
            b"vision_delay",
            "vision_processing_time",
            b"vision_processing_time",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "ball_visibility_threshold",
            b"ball_visibility_threshold",
            "camera_overlap",
            b"camera_overlap",
            "camera_position_error",
            b"camera_position_error",
            "dribbler_ball_detections",
            b"dribbler_ball_detections",
            "enable_invisible_ball",
            b"enable_invisible_ball",
            "missing_ball_detections",
            b"missing_ball_detections",
            "missing_robot_detections",
            b"missing_robot_detections",
            "object_position_offset",
            b"object_position_offset",
            "robot_command_loss",
            b"robot_command_loss",
            "robot_response_loss",
            b"robot_response_loss",
            "simulate_dribbling",
            b"simulate_dribbling",
            "stddev_ball_area",
            b"stddev_ball_area",
            "stddev_ball_p",
            b"stddev_ball_p",
            "stddev_robot_p",
            b"stddev_robot_p",
            "stddev_robot_phi",
            b"stddev_robot_phi",
            "vision_delay",
            b"vision_delay",
            "vision_processing_time",
            b"vision_processing_time",
        ],
    ) -> None: ...

global___RealismConfigErForce = RealismConfigErForce
