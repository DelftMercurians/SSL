"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import ssl_game_controller_common_pb2
import ssl_simulation_config_pb2
import ssl_simulation_error_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class TeleportBall(google.protobuf.message.Message):
    """WARNING for all of these messages: They are used internally in full vision coordinate systems (mm / mm per second)
    External users will send and recieve messages in the stipulated units (meters / meters per seconds)
    Be careful when converting between these two uses.

    Teleport the ball to a new location and optionally set it to some velocity
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    VX_FIELD_NUMBER: builtins.int
    VY_FIELD_NUMBER: builtins.int
    VZ_FIELD_NUMBER: builtins.int
    TELEPORT_SAFELY_FIELD_NUMBER: builtins.int
    ROLL_FIELD_NUMBER: builtins.int
    BY_FORCE_FIELD_NUMBER: builtins.int
    x: builtins.float
    """x-coordinate [m] (internally in mm, see comment on the top)"""
    y: builtins.float
    """y-coordinate [m] (internally in mm, see comment on the top)"""
    z: builtins.float
    """z-coordinate (height) [m] (internally in mm, see comment on the top)"""
    vx: builtins.float
    """Velocity in x-direction [m/s] (internally in mm, see comment on the top)"""
    vy: builtins.float
    """Velocity in y-direction [m/s] (internally in mm, see comment on the top)"""
    vz: builtins.float
    """Velocity in z-direction [m/s] (internally in mm, see comment on the top)"""
    teleport_safely: builtins.bool
    """Teleport the ball safely to the target, for example by
    moving robots out of the way in case of collision and set speed of robots close-by to zero
    """
    roll: builtins.bool
    """Adapt the angular ball velocity such that the ball is rolling"""
    by_force: builtins.bool
    """Instead of teleporting the ball, apply some force to make sure
    the ball reaches the required position soon (velocity is ignored if true)
    """
    def __init__(
        self,
        *,
        x: builtins.float | None = ...,
        y: builtins.float | None = ...,
        z: builtins.float | None = ...,
        vx: builtins.float | None = ...,
        vy: builtins.float | None = ...,
        vz: builtins.float | None = ...,
        teleport_safely: builtins.bool | None = ...,
        roll: builtins.bool | None = ...,
        by_force: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "by_force",
            b"by_force",
            "roll",
            b"roll",
            "teleport_safely",
            b"teleport_safely",
            "vx",
            b"vx",
            "vy",
            b"vy",
            "vz",
            b"vz",
            "x",
            b"x",
            "y",
            b"y",
            "z",
            b"z",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "by_force",
            b"by_force",
            "roll",
            b"roll",
            "teleport_safely",
            b"teleport_safely",
            "vx",
            b"vx",
            "vy",
            b"vy",
            "vz",
            b"vz",
            "x",
            b"x",
            "y",
            b"y",
            "z",
            b"z",
        ],
    ) -> None: ...

global___TeleportBall = TeleportBall

@typing_extensions.final
class TeleportRobot(google.protobuf.message.Message):
    """Teleport a robot to some location and give it a velocity"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    ORIENTATION_FIELD_NUMBER: builtins.int
    V_X_FIELD_NUMBER: builtins.int
    V_Y_FIELD_NUMBER: builtins.int
    V_ANGULAR_FIELD_NUMBER: builtins.int
    PRESENT_FIELD_NUMBER: builtins.int
    BY_FORCE_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> ssl_game_controller_common_pb2.BotId:
        """Robot id to teleport"""
    x: builtins.float
    """x-coordinate [m] (internally in mm, see comment on the top)"""
    y: builtins.float
    """y-coordinate [m] (internally in mm, see comment on the top)"""
    orientation: builtins.float
    """Orientation [rad], measured from the x-axis counter-clockwise"""
    v_x: builtins.float
    """Global velocity [m/s] towards x-axis (internally in mm, see comment on the top)"""
    v_y: builtins.float
    """Global velocity [m/s] towards y-axis (internally in mm, see comment on the top)"""
    v_angular: builtins.float
    """Angular velocity [rad/s]"""
    present: builtins.bool
    """Robot should be present on the field?
    true -> robot will be added, if it does not exist yet
    false -> robot will be removed, if it is present
    """
    by_force: builtins.bool
    """Instead of teleporting, apply some force to make sure
    the robot reaches the required position soon (velocity is ignored if true)
    """
    def __init__(
        self,
        *,
        id: ssl_game_controller_common_pb2.BotId | None = ...,
        x: builtins.float | None = ...,
        y: builtins.float | None = ...,
        orientation: builtins.float | None = ...,
        v_x: builtins.float | None = ...,
        v_y: builtins.float | None = ...,
        v_angular: builtins.float | None = ...,
        present: builtins.bool | None = ...,
        by_force: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "by_force",
            b"by_force",
            "id",
            b"id",
            "orientation",
            b"orientation",
            "present",
            b"present",
            "v_angular",
            b"v_angular",
            "v_x",
            b"v_x",
            "v_y",
            b"v_y",
            "x",
            b"x",
            "y",
            b"y",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "by_force",
            b"by_force",
            "id",
            b"id",
            "orientation",
            b"orientation",
            "present",
            b"present",
            "v_angular",
            b"v_angular",
            "v_x",
            b"v_x",
            "v_y",
            b"v_y",
            "x",
            b"x",
            "y",
            b"y",
        ],
    ) -> None: ...

global___TeleportRobot = TeleportRobot

@typing_extensions.final
class SimulatorControl(google.protobuf.message.Message):
    """Control the simulation"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TELEPORT_BALL_FIELD_NUMBER: builtins.int
    TELEPORT_ROBOT_FIELD_NUMBER: builtins.int
    SIMULATION_SPEED_FIELD_NUMBER: builtins.int
    @property
    def teleport_ball(self) -> global___TeleportBall:
        """Teleport the ball"""
    @property
    def teleport_robot(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TeleportRobot]:
        """Teleport robots"""
    simulation_speed: builtins.float
    """Change the simulation speed"""
    def __init__(
        self,
        *,
        teleport_ball: global___TeleportBall | None = ...,
        teleport_robot: collections.abc.Iterable[global___TeleportRobot] | None = ...,
        simulation_speed: builtins.float | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "simulation_speed", b"simulation_speed", "teleport_ball", b"teleport_ball"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "simulation_speed",
            b"simulation_speed",
            "teleport_ball",
            b"teleport_ball",
            "teleport_robot",
            b"teleport_robot",
        ],
    ) -> None: ...

global___SimulatorControl = SimulatorControl

@typing_extensions.final
class SimulatorCommand(google.protobuf.message.Message):
    """Command from the connected client to the simulator"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTROL_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    @property
    def control(self) -> global___SimulatorControl:
        """Control the simulation"""
    @property
    def config(self) -> ssl_simulation_config_pb2.SimulatorConfig:
        """Configure the simulation"""
    def __init__(
        self,
        *,
        control: global___SimulatorControl | None = ...,
        config: ssl_simulation_config_pb2.SimulatorConfig | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["config", b"config", "control", b"control"]
    ) -> builtins.bool: ...
    def ClearField(
        self, field_name: typing_extensions.Literal["config", b"config", "control", b"control"]
    ) -> None: ...

global___SimulatorCommand = SimulatorCommand

@typing_extensions.final
class SimulatorResponse(google.protobuf.message.Message):
    """Response of the simulator to the connected client"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ERRORS_FIELD_NUMBER: builtins.int
    @property
    def errors(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        ssl_simulation_error_pb2.SimulatorError
    ]:
        """List of errors, like using unsupported features"""
    def __init__(
        self,
        *,
        errors: collections.abc.Iterable[ssl_simulation_error_pb2.SimulatorError] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["errors", b"errors"]) -> None: ...

global___SimulatorResponse = SimulatorResponse
